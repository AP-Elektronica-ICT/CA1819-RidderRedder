<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RidderRedderApi.Web.Api</name>
    </assembly>
    <members>
        <member name="T:RidderRedderApi.Web.Api.Controllers.InventoryController">
            <summary>
            Inventory controller.
            </summary>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.InventoryController.#ctor(RidderRedderApi.Services.InventoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:RidderRedderApi.Web.Api.Controllers.InventoryController"/> class.
            </summary>
            <param name="invService">Inv service.</param>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.InventoryController.GetInventoryForPlayer(System.String)">
            <summary>
            Gets the inventory for player.
            </summary>
            <returns>The inventory for player.</returns>
            <param name="authid">Authid.</param>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.InventoryController.PostInventoryItem(RidderRedderApi.ViewModels.AddInventoryItemDto)">
            <summary>
            Posts the inventory item.
            </summary>
            <returns>The inventory item.</returns>
            <param name="item">Item.</param>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.InventoryController.UpdateInventoryItem(RidderRedderApi.ViewModels.UpdateInventoryItemDto,System.Int32)">
            <summary>
            Updates the inventory item.
            </summary>
            <returns>The inventory item.</returns>
            <param name="item">Item.</param>
            <param name="itemid">Itemid.</param>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.InventoryController.DeleteInventoryItem(System.Int32)">
            <summary>
            Deletes the inventory item.
            </summary>
            <returns><c>true</c>, if inventory item was deleted, <c>false</c> otherwise.</returns>
            <param name="itemid">Itemid.</param>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.InventoryController.GetAllItemTypes">
            <summary>
            Gets all item types.
            </summary>
            <returns>The all item types.</returns>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.InventoryController.GetAllItemImages">
            <summary>
            Gets all item images.
            </summary>
            <returns>The all item images.</returns>
        </member>
        <member name="T:RidderRedderApi.Web.Api.Controllers.MonsterController">
            <summary>
            Monster controller.
            </summary>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.MonsterController.#ctor(RidderRedderApi.Services.MonsterService)">
            <summary>
            Initializes a new instance of the <see cref="T:RidderRedderApi.Web.Api.Controllers.MonsterController"/> class.
            </summary>
            <param name="monsterService">Monster service.</param>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.MonsterController.Get">
            <summary>
            Get a new randomly generated monster
            </summary>
            <returns>The get.</returns>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.MonsterController.GetList(System.Int32)">
            <summary>
            Gets a list of {count} randomly generated monsters
            </summary>
            <returns>The list.</returns>
            <param name="count">Count.</param>
        </member>
        <member name="T:RidderRedderApi.Web.Api.Controllers.MonsterModelController">
            <summary>
            Monster model controller.
            </summary>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.MonsterModelController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RidderRedderApi.Web.Api.Controllers.MonsterModelController"/> class.
            </summary>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.MonsterModelController.GetMonsterModelImage(System.String)">
            <summary>
            Gets the monster model image stored on the server saved in PNG format
            </summary>
            <returns>The monster model image.</returns>
            <param name="monsterModelPath">Monster model path.</param>
        </member>
        <member name="T:RidderRedderApi.Web.Api.Controllers.PlayerController">
            <summary>
            Player controller.
            </summary>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.PlayerController.#ctor(RidderRedderApi.Services.PlayerService)">
            <summary>
            Initializes a new instance of the <see cref="T:RidderRedderApi.Web.Api.Controllers.PlayerController"/> class.
            </summary>
            <param name="playerService">Player service.</param>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.PlayerController.GetAll">
            <summary>
            Gets all players
            </summary>
            <returns>The all.</returns>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.PlayerController.Get(System.String)">
            <summary>
            Get the specified player with given userid
            </summary>
            <returns>The get.</returns>
            <param name="authId">Auth identifier.</param>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.PlayerController.Update(System.String,RidderRedderApi.Models.Player)">
            <summary>
            Update the specified player with given authid
            </summary>
            <returns>The update.</returns>
            <param name="authid">Authid.</param>
            <param name="p">P.</param>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.PlayerController.Post(RidderRedderApi.Models.Player)">
            <summary>
            Post the specified Player
            </summary>
            <returns>The post.</returns>
            <param name="p">P.</param>
        </member>
        <member name="M:RidderRedderApi.Web.Api.Controllers.PlayerController.Delete(System.String)">
            <summary>
            Delete the specified player.
            </summary>
            <returns>The delete.</returns>
            <param name="authId">Auth identifier.</param>
        </member>
        <member name="T:RidderRedderApi.Program">
            <summary>
            Program.
            </summary>
        </member>
        <member name="M:RidderRedderApi.Program.Main(System.String[])">
            <summary>
            The entry point of the program, where the program control starts and ends.
            </summary>
            <param name="args">The command-line arguments.</param>
        </member>
        <member name="M:RidderRedderApi.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            Creates the web host builder.
            </summary>
            <returns>The web host builder.</returns>
            <param name="args">Arguments.</param>
        </member>
        <member name="T:RidderRedderApi.Startup">
            <summary>
            Startup.
            </summary>
        </member>
        <member name="M:RidderRedderApi.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:RidderRedderApi.Startup"/> class.
            </summary>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="P:RidderRedderApi.Startup.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:RidderRedderApi.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures the services.
            </summary>
            <param name="services">Services.</param>
        </member>
        <member name="M:RidderRedderApi.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment,RidderRedderApi.Repositories.ApplicationContext)">
            <summary>
            Configure the specified app, env and ctx.
            </summary>
            <param name="app">App.</param>
            <param name="env">Env.</param>
            <param name="ctx">Context.</param>
        </member>
    </members>
</doc>
